BEGIN
{
    printf("Tracing libpthread mutex held times, Ctrl-C to end.\n");
}

u:/lib/x86_64-linux-gnu/libpthread.so.0:pthread_mutex_lock,
u:/lib/x86_64-linux-gnu/libpthread.so.0:pthread_mutex_trylock
/$1 == 0 || pid == $1/
{
    @lock_addr[tid] = arg0;
}

ur:/lib/x86_64-linux-gnu/libpthread.so.0:pthread_mutex_lock
/($1 == 0 || pid == $1) && @lock_addr[tid]/
{
    @held_start[pid, @lock_addr[tid]] = nsecs;
    delete(@lock_addr[tid]);
}

ur:/lib/x86_64-linux-gnu/libpthread.so.0:pthread_mutex_trylock
/retval == 0 && ($1 == 0 || pid == $1) && @lock_addr[tid]/
{
    @held_start[pid, @lock_addr[tid]] = nsecs;
    delete(@lock_addr[tid]);
}

u:/lib/x86_64-linux-gnu/libpthread.so.0:pthread_mutex_unlock
/($1 == 0 || pid == $1) && @held_start[pid, arg0]/
{
    //从争夺锁到释放锁的延迟
    @held_time_ns[usym(arg0), ustack(5), comm] = hist(nsecs - @held_start[pid, arg0]);
    delete(@held_start[pid, arg0]);
}

END
{
    clear(@held_start);
    clear(@lock_addr);
}
