#include <net/sock.h>
#include <linux/socket.h>
#include <linux/tcp.h>

BEGIN
{
    printf("%-5s %-10s %-15s %-5s %-15s %-5s   ", "PID", "COMM", "LADDR", "LPORT", "RADDR", "RPORT");
    printf("%5s %5s %s\n", "TX_KB", "RX_KB", "MS");
}

k:tcp_set_state
{
    $sk = (struct sock *)arg0;
    $newstate = arg1;
    if($newstate < TCP_FIN_WAIT1 && @birth[$sk] == 0) {
        @birth[$sk] = nsecs;
    }
    if($newstate == TCP_SYN_SENT && $newstate == TCP_LAST_ACK) {
        @skpid[$sk] = pid;
        @skcomm[$sk] = comm;
    }

    if($newstate == TCP_CLOSE && @birth[$sk]) {
        $delta_ms = (nsecs - @birth[$sk]) / 1000000;
        $lport = $sk->__sk_common.skc_num;
        $dport = $sk->__sk_common.skc_dport;
        $dport = ($dport >> 8) | (($dport << 8) & 0xff00);
        $tp = (struct tcp_sock *)$sk;
        $pid = @skpid[$sk];
        $comm = @skcomm[$sk];
        if($comm == "") {
            $pid = pid;
            $comm = comm;
        }
        $family = $sk->__sk_common.skc_family;
        $saddr = ntop(0);
        $daddr = ntop(0);
        if($family == AF_INET) {
            $saddr = ntop(AF_INET, $sk->__sk_common.skc_rcv_saddr);
            $daddr = ntop(AF_INET, $sk->__sk_common.skc_daddr);
        } else {
            $saddr = ntop(AF_INET6, $sk->__sk_common.skc_v6_rcv_saddr.s6_addr);
            $daddr = ntop(AF_INET6, $sk->__sk_common.skc_v6_daddr.s6_addr);
        }
        printf("%-5d %-10.10s %-15s %-5d %-15s %-6d ", $pid, $comm, $saddr, $lport, $daddr, $dport);
        printf("%5d%5d   %d\n", $tp->bytes_acked / 1024, $tp->bytes_received / 1024, $delta_ms);

        delete(@birth[$sk]);
        delete(@skpid[$sk]);
        delete(@skcomm[$sk]);
    }
}

END
{
    clear(@birth);
    clear(@skpid);
    clear(@skcomm);
}